{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udd16 PyConector de Automa\u00e7\u00e3o WhatsApp","text":"<p>Projeto que automatiza intera\u00e7\u00f5es com o WhatsApp Web utilizando Selenium WebDriver e Flask, permitindo o envio de mensagens, leitura de conversas e controle via API REST ou scripts aut\u00f4nomos.</p> <p>\ud83d\udd17 Contato profissional: linkedin.com/in/marco-antonio-aa3024233 \ud83d\udd17 Repositorio-PyConector: https://github.com/marco0antonio0/py-connector-whatsapp-unofficial </p>"},{"location":"#principais-funcionalidades","title":"\ud83d\ude80 Principais Funcionalidades","text":"<ul> <li> <p>\u2705 Login via QR Code   Gere e autentique sess\u00f5es do WhatsApp automaticamente com QRCode tempor\u00e1rio.</p> </li> <li> <p>\ud83d\udcac Envio de Mensagens   Envie uma ou mais mensagens de texto para contatos com base em comandos diretos ou via API.</p> </li> <li> <p>\ud83d\udd0d Detec\u00e7\u00e3o de Novas Mensagens   Monitore a chegada de mensagens em tempo real e interaja com l\u00f3gica personalizada.</p> </li> <li> <p>\ud83c\udf10 API REST com Flask   Endpoints documentados com Swagger para integra\u00e7\u00e3o com outros sistemas.</p> </li> <li> <p>\ud83e\udde0 Execu\u00e7\u00e3o Aut\u00f4noma via Terminal   Scripts independentes para comportamentos automatizados cont\u00ednuos, sem uso da API.</p> </li> </ul>"},{"location":"#documentacao","title":"\ud83d\udcda Documenta\u00e7\u00e3o","text":"<p>Acesse a documenta\u00e7\u00e3o interativa da API localmente em:</p> <pre><code>http://localhost:3000/apidocs/\n</code></pre> <p>Inclui exemplos de payloads, descri\u00e7\u00f5es de respostas e testes r\u00e1pidos diretamente via navegador.</p>"},{"location":"#tecnologias-utilizadas","title":"\ud83d\udee0\ufe0f Tecnologias Utilizadas","text":"<ul> <li>Python 3.10+</li> <li>Selenium WebDriver</li> <li>Flask</li> <li>Flasgger (Swagger UI)</li> <li>ChromeDriver</li> <li>Threading &amp; Queue para controle sequencial de tarefas</li> </ul>"},{"location":"#exemplos-de-uso","title":"\ud83e\uddea Exemplos de Uso","text":"<p>Explore os scripts de exemplo dispon\u00edveis na raiz do projeto para testar respostas autom\u00e1ticas, envio de imagens e fluxos baseados em mensagens recebidas.</p> <p>Este projeto \u00e9 ideal para desenvolvedores que desejam automatizar tarefas no WhatsApp Web, construir bots simples ou integrar com sistemas existentes.</p>"},{"location":"estrutura/","title":"\ud83d\udcc1 Estrutura do Projeto","text":"<p>Abaixo est\u00e1 a estrutura principal do reposit\u00f3rio <code>py-connector-whatsapp-unofficial</code>, destacando os diret\u00f3rios e arquivos mais relevantes para o funcionamento da automa\u00e7\u00e3o via API.</p> <p>\ud83d\udd17 Contato profissional: linkedin.com/in/marco-antonio-aa3024233 </p> <pre><code>py-connector-whatsapp-unofficial/\n\u251c\u2500 api.py                          # API Flask (rotas e integra\u00e7\u00e3o com o PyConector)\n\u251c\u2500 main.py                         # Execu\u00e7\u00e3o direta do PyConector autonomo\n\u251c\u2500 requirements.txt                # Depend\u00eancias do projeto\n\u251c\u2500 install.sh                      # Script de instala\u00e7\u00e3o \n\u251c\u2500 swagger.yml                     # documenta\u00e7\u00e3o interativa Swagger\n\u2502\n\u251c\u2500 services/                       # L\u00f3gica da automa\u00e7\u00e3o e subcomponentes\n\u2502  \u251c\u2500 bot/\n\u2502  \u2502  \u251c\u2500 bot.py                    # Classe principal 'automation'\n\u2502  \u2502  \u2514\u2500 services/                 # M\u00f3dulos espec\u00edficos usados pela automa\u00e7\u00e3o\n\u2502  \u2502     \u251c\u2500 login.py\n\u2502  \u2502     \u251c\u2500 checkIsLogin.py\n\u2502  \u2502     \u251c\u2500 getDataRef.py\n\u2502  \u2502     \u251c\u2500 pegar_todas_mensagens.py\n\u2502  \u2502     \u251c\u2500 enviar_mensagem_para_contato_aberto.py\n\u2502  \u2502     \u2514\u2500 ...\n\u2502  \u2514\u2500 generateQRcode.py           # Gera\u00e7\u00e3o manual de QRCode via terminal\n\u2502\n\u251c\u2500 static/\n\u2502  \u2514\u2500 qrcodes/                     # Armazena imagens tempor\u00e1rias de QRCode\n\u2502     \u2514\u2500 &lt;uuid&gt;.png\n\u2502\n\u251c\u2500 utils/\n\u2502  \u2514\u2500 normalizarMessages.py       # Fun\u00e7\u00e3o utilit\u00e1ria para limpeza e normaliza\u00e7\u00e3o de texto\n\u2502\n\u251c\u2500 chromeDrive/                   # WebDriver do ChromeDrive(baixado pelo script de instala\u00e7\u00e3o)\n\u2502  \u251c\u2500 chromedriver\n\u2502  \u251c\u2500 LICENSE.chromedriver\n\u2502  \u2514\u2500 THIRD_PARTY_NOTICES.chromedriver\n\u2502\n\u251c\u2500 dados/                         # Diret\u00f3rio persistente do perfil de usu\u00e1rio do Chrome De sess\u00e3o\n\u2502  \u2514\u2500 ...\n\u2502\n\u251c\u2500 images/\n\u2502  \u2514\u2500 teste.png                   # Imagem de exemplo para envio\n\u2502\n\u251c\u2500 exemplos/                      # Exemplos pr\u00e1ticos de uso\n\u251c\u2500 example_of_auto_response_to_any_contact.py      # Exemplos pr\u00e1ticos de uso PyConector autonomo\n\u251c\u2500 example_of_response_based_on_last_message.py    # Exemplos pr\u00e1ticos de uso PyConector autonomo\n\u251c\u2500 example_of_sending_image_to_specific_contact.py # Exemplos pr\u00e1ticos de uso PyConector autonomo\n\u2502\n\u251c\u2500 README.md                      # Descri\u00e7\u00e3o principal do projeto\n\u251c\u2500 LEARN.md                       # Rascunhos ou notas de aprendizado\n\u2514\u2500 License.md                     # Licen\u00e7a do projeto\n</code></pre>"},{"location":"estrutura/#principais-componentes","title":"\ud83d\udccc Principais Componentes","text":"<ul> <li> <p><code>services.bot.bot</code>   Cont\u00e9m a classe <code>automation</code>, respons\u00e1vel por controlar todas as a\u00e7\u00f5es com o WhatsApp Web.</p> </li> <li> <p><code>services.bot.services/</code>   Cada arquivo representa uma funcionalidade separada, como login, envio de mensagens ou verifica\u00e7\u00e3o de status.</p> </li> <li> <p><code>static/qrcodes/</code>   Diret\u00f3rio onde os QR Codes gerados temporariamente s\u00e3o salvos e servidos pela API.</p> </li> <li> <p><code>swagger.yml</code>   Define a documenta\u00e7\u00e3o OpenAPI da API Flask, utilizada pelo Swagger UI.</p> </li> <li> <p><code>api.py</code>   Cont\u00e9m as rotas da API Flask que interagem com a automa\u00e7\u00e3o.</p> </li> <li> <p><code>main.py</code>   Permite iniciar o PyConector diretamente sem expor via API \u2014 \u00fatil para testes manuais ou uso autonomo.</p> </li> </ul>"},{"location":"instalacao/","title":"\ud83d\udce6 PyConector - Instala\u00e7\u00e3o e Inicializa\u00e7\u00e3o","text":"<ol> <li>Clone o reposit\u00f3rio:</li> </ol> <p><code>bash    git clone https://github.com/marco0antonio0/py-connector-whatsapp-unofficial    cd py-connector-whatsapp-unofficial</code></p> <ol> <li>Instale as depend\u00eancias python:</li> </ol> <p><code>bash    pip install -r requirements.txt</code></p> <ol> <li>Execute o script de instala\u00e7\u00e3o:</li> </ol> <p><code>bash    chmod +x install.sh    ./install.sh</code>    \ud83d\udd27 O que o ./install.sh faz:</p> <pre><code>Este script automatiza toda a configura\u00e7\u00e3o necess\u00e1ria para que o PyConector funcione corretamente com o Google Chrome e o ChromeDriver compat\u00edveis.\n\n\ud83d\udccb Etapas executadas:\n\n1. Verifica se o Google Chrome est\u00e1 instalado:\n- Caso n\u00e3o esteja, o script baixa o pacote .deb do Chrome diretamente do site oficial do Google.\n- Em seguida, ele instala automaticamente o navegador via apt.\n\n2. Detecta a vers\u00e3o instalada do Google Chrome:\n- O script executa google-chrome --version e extrai a vers\u00e3o exata instalada para garantir compatibilidade com o ChromeDriver.\n\n3. Monta a URL de download do ChromeDriver oficial:\n- Com base na vers\u00e3o instalada do Chrome, \u00e9 gerada uma URL personalizada de download direto do servidor do Google:\n    https://storage.googleapis.com/chrome-for-testing-public/&lt;vers\u00e3o&gt;/linux64/chromedriver-linux64.zip\n\n4. Cria o diret\u00f3rio ./chromeDrive:\n- Todos os arquivos extra\u00eddos do ChromeDriver ser\u00e3o armazenados neste diret\u00f3rio, usado pela automa\u00e7\u00e3o.\n\n5. Baixa e extrai o ChromeDriver:\n- O .zip \u00e9 baixado silenciosamente.\n- O conte\u00fado \u00e9 extra\u00eddo e movido diretamente para a pasta ./chromeDrive.\n\n6. Remove arquivos tempor\u00e1rios:\n- Limpeza autom\u00e1tica do .zip baixado e das pastas auxiliares para manter o ambiente limpo.\n\n\u2705 Resultado:\nAp\u00f3s rodar ./install.sh, seu ambiente estar\u00e1 preparado com:\n- Google Chrome instalado (caso n\u00e3o estivesse).\n- ChromeDriver correspondente \u00e0 vers\u00e3o do Chrome, localizado em ./chromeDrive/.\n</code></pre> <ol> <li>Inicie o PyConector:</li> <li>Op\u00e7\u00f5es:<ul> <li>Iniciar a PyConector Autonomo</li> <li>```bash     python3 main.py</li> <li>Iniciar a PyConector API</li> <li>```bash     python3 api.py</li> </ul> </li> <li>Acesse o swaggerDocs e veja os endpoints:     \ud83c\udf10 Swagger dispon\u00edvel em: http://localhost:3000/apidocs/ </li> </ol>"},{"location":"api/","title":"\ud83d\udcd8 API - Vis\u00e3o Geral","text":"<p>Esta API foi desenvolvida com Flask e integra automa\u00e7\u00e3o via Selenium WebDriver para intera\u00e7\u00f5es automatizadas com o WhatsApp Web. Seu principal objetivo \u00e9 fornecer uma interface simples e poderosa para iniciar sess\u00f5es, autenticar via QR Code, enviar mensagens e consultar o status ou hist\u00f3rico de conversas de forma program\u00e1tica.</p> <p>A arquitetura foi projetada com foco em concorr\u00eancia controlada, utilizando <code>Queue</code> e <code>Thread</code>, garantindo que apenas uma tarefa seja executada por vez. Isso evita conflitos e garante estabilidade mesmo em opera\u00e7\u00f5es cont\u00ednuas com o navegador.</p> <p>\ud83d\udd17 Contato profissional: linkedin.com/in/marco-antonio-aa3024233 </p>"},{"location":"api/#funcionalidades-principais","title":"\ud83d\udd27 Funcionalidades Principais","text":"<p>A API exp\u00f5e rotas RESTful que permitem:</p> <ul> <li><code>POST /start</code>: Inicia o PyConector e carrega o WhatsApp Web.</li> <li><code>POST /login</code>: Gera e disponibiliza o QR Code para autentica\u00e7\u00e3o.</li> <li><code>POST /send</code>: Envia uma ou mais mensagens para um contato espec\u00edfico.</li> <li><code>GET /status</code>: Retorna se o PyConector est\u00e1 rodando e se est\u00e1 logado.</li> <li><code>GET /history/&lt;contato&gt;</code>: Recupera todas as mensagens trocadas com um contato.</li> <li><code>POST /stop</code>: Encerra a sess\u00e3o e finaliza o PyConector.</li> </ul>"},{"location":"api/#tecnologias-utilizadas","title":"\ud83d\udee0\ufe0f Tecnologias Utilizadas","text":"<ul> <li>Flask \u2013 Framework web para constru\u00e7\u00e3o da API.</li> <li>Selenium WebDriver \u2013 Utilizado para automatizar o navegador e controlar o WhatsApp Web.</li> <li>Flasgger \u2013 Gera\u00e7\u00e3o autom\u00e1tica da documenta\u00e7\u00e3o Swagger.</li> <li>Threading + Queue \u2013 Controla a execu\u00e7\u00e3o sequencial de tarefas no backend.</li> <li>qrcode \u2013 Cria\u00e7\u00e3o de QR Codes tempor\u00e1rios para autentica\u00e7\u00e3o no WhatsApp.</li> </ul>"},{"location":"api/#documentacao-interativa","title":"\ud83d\udcda Documenta\u00e7\u00e3o Interativa","text":"<p>Uma interface interativa e pronta para testes est\u00e1 dispon\u00edvel atrav\u00e9s do Swagger:</p> <p>\ud83c\udf10 <code>http://localhost:3000/apidocs/</code></p> <p>Esta vis\u00e3o geral oferece um panorama r\u00e1pido da estrutura e capacidades da API, sendo ideal para desenvolvedores que desejam incorporar automa\u00e7\u00e3o do WhatsApp em seus projetos de forma simples e controlada.</p>"},{"location":"api/endpoints/","title":"\ud83d\udcd8 Endpoint da API PyConector WhatsApp","text":"<p>Este projeto \u00e9 um PyConector de automa\u00e7\u00e3o do WhatsApp desenvolvido com Selenium WebDriver, permitindo intera\u00e7\u00f5es autom\u00e1ticas com o WhatsApp Web como envio de mensagens, detec\u00e7\u00e3o de novas conversas, leitura de hist\u00f3rico, entre outros.</p> <p>\ud83d\udd17 Contato profissional: linkedin.com/in/marco-antonio-aa3024233 \ud83c\udf10 Swagger dispon\u00edvel em: http://localhost:3000/apidocs/ (quando executando o projeto localmente)</p>"},{"location":"api/endpoints/#endpoints-detalhados","title":"\ud83d\udd0c Endpoints Detalhados","text":""},{"location":"api/endpoints/#post-start","title":"\u25b6\ufe0f <code>POST /start</code>","text":"<p>Inicia o PyConector na thread principal.</p> <p>Resposta:</p> <pre><code>{\n  \"status\": \"sucesso\",\n  \"mensagem\": \"Bot iniciado com sucesso.\"\n}\n</code></pre>"},{"location":"api/endpoints/#post-login","title":"\ud83d\udd10 <code>POST /login</code>","text":"<p>Gera e retorna o QRCode de autentica\u00e7\u00e3o do WhatsApp Web.</p> <p>Resposta:</p> <pre><code>{\n  \"status\": \"aguardando_login\",\n  \"mensagem\": \"Bot em execu\u00e7\u00e3o aguardando leitura do QRCode.\",\n  \"qrCodeUrl\": \"http://localhost:3000/qrcode/abc123def456.png\"\n}\n</code></pre>"},{"location":"api/endpoints/#post-send","title":"\u2709\ufe0f <code>POST /send</code>","text":"<p>Envia uma ou mais mensagens para um contato.</p> <p>Requisi\u00e7\u00e3o:</p> <pre><code>{\n  \"contato\": \"Jo\u00e3o\",\n  \"mensagens\": [\"Oi\", \"Tudo bem?\"]\n}\n</code></pre> <p>Resposta:</p> <pre><code>{\n  \"status\": \"sucesso\",\n  \"mensagem\": \"Mensagens enviadas com sucesso.\",\n  \"dados\": {\n    \"historico_mensagens\": [\n      \"Oi\",\n      \"Tudo bem?\",\n      \"Resposta do contato...\"\n    ]\n  }\n}\n</code></pre>"},{"location":"api/endpoints/#get-historycontato","title":"\ud83d\udcdc <code>GET /history/{contato}</code>","text":"<p>Obt\u00e9m hist\u00f3rico de mensagens com um contato espec\u00edfico.</p> <p>Par\u00e2metros: - <code>contato</code> (path): Nome do contato para abrir a conversa.</p> <p>Resposta:</p> <pre><code>{\n  \"status\": \"sucesso\",\n  \"mensagem\": \"Hist\u00f3rico obtido com sucesso.\",\n  \"dados\": {\n    \"mensagens\": [\n      \"Ol\u00e1!\",\n      \"Como vai?\",\n      \"Tudo certo por a\u00ed?\"\n    ]\n  }\n}\n</code></pre>"},{"location":"api/endpoints/#get-status","title":"\ud83d\udce1 <code>GET /status</code>","text":"<p>Verifica se o PyConector est\u00e1 ativo e se est\u00e1 logado.</p> <p>Resposta:</p> <pre><code>{\n  \"status\": \"ativo\",\n  \"logado\": true,\n  \"mensagem\": \"Bot est\u00e1 rodando e logado.\"\n}\n</code></pre>"},{"location":"api/endpoints/#post-stop","title":"\u26d4 <code>POST /stop</code>","text":"<p>Finaliza o PyConector e encerra o navegador.</p> <p>Resposta:</p> <pre><code>{\n  \"status\": \"sucesso\",\n  \"mensagem\": \"Bot finalizado com sucesso.\"\n}\n</code></pre>"},{"location":"codigo/automation/","title":"\ud83e\udde0 Classe <code>automation</code>","text":"<p>Classe principal respons\u00e1vel por gerenciar a automa\u00e7\u00e3o do WhatsApp Web via Selenium WebDriver. Essa classe encapsula todos os m\u00e9todos necess\u00e1rios para inicializar o navegador, autenticar com QR Code, enviar mensagens, verificar status e interagir com contatos.</p> <pre><code>from selenium import webdriver\n\nclass automation:\n    \"\"\"Classe principal de automa\u00e7\u00e3o para WhatsApp Web.\"\"\"\n\n    def __init__(self, gui=False):\n        \"\"\"\n        Inicializa o navegador com as op\u00e7\u00f5es definidas.\n\n        Args:\n            gui (bool): Se True, abre o navegador com interface gr\u00e1fica. Caso contr\u00e1rio, roda em modo headless.\n        \"\"\"\n</code></pre>"},{"location":"codigo/automation/#principais-metodos","title":"\ud83d\udd27 Principais M\u00e9todos","text":""},{"location":"codigo/automation/#autenticacao-e-sessao","title":"\ud83d\udd11 Autentica\u00e7\u00e3o e Sess\u00e3o","text":"<ul> <li> <p><code>getDataRef()</code>   Gera e retorna os dados utilizados na gera\u00e7\u00e3o do QR Code para login.</p> </li> <li> <p><code>login()</code>   Inicia o processo de login, aguardando a leitura do QR Code. Utilizado na execu\u00e7\u00e3o do codigo autonomo</p> </li> <li> <p><code>checkIsLogin()</code>   Verifica se o usu\u00e1rio j\u00e1 est\u00e1 logado no WhatsApp Web.</p> </li> <li> <p><code>start()</code>   Executa a rotina completa de inicializa\u00e7\u00e3o manual da automa\u00e7\u00e3o.</p> </li> <li> <p><code>start_api()</code>   Executa a inicializa\u00e7\u00e3o manual adaptada para controle via API.</p> </li> <li> <p><code>go_to_home()</code>   Redireciona o navegador para a tela inicial do WhatsApp ap\u00f3s o login.</p> </li> <li> <p><code>exit()</code>   Encerra o navegador e finaliza a sess\u00e3o atual.</p> </li> </ul>"},{"location":"codigo/automation/#mensagens-e-conversas","title":"\u2709\ufe0f Mensagens e Conversas","text":"<ul> <li> <p><code>enviar_mensagem_para_contato_aberto(texto)</code>   Envia uma mensagem de texto para o contato com a conversa j\u00e1 aberta.</p> </li> <li> <p><code>pegar_ultima_mensagem()</code>   Retorna a \u00faltima mensagem trocada na conversa aberta.</p> </li> <li> <p><code>pegar_todas_mensagens()</code>   Retorna todo o hist\u00f3rico de mensagens da conversa aberta.</p> </li> <li> <p><code>searchExistsContactAndOpen(contato)</code>   Pesquisa por um contato na lista e abre a conversa.</p> </li> <li> <p><code>abrir_conversa_por_nome(contato)</code>   Acessa diretamente a conversa de um contato pelo nome.</p> </li> </ul>"},{"location":"codigo/automation/#envio-de-midia","title":"\ud83d\uddbc\ufe0f Envio de M\u00eddia","text":"<ul> <li> <p><code>openImage(image_path)</code>   Abre e processa uma imagem para envio.</p> </li> <li> <p><code>sendFigure(midia)</code>   Envia uma imagem/m\u00eddia j\u00e1 processada na conversa atual.</p> </li> </ul>"},{"location":"codigo/automation/#notificacoes-e-monitoramento","title":"\ud83d\udd14 Notifica\u00e7\u00f5es e Monitoramento","text":"<ul> <li><code>VerificarNovaMensagem()</code>   Verifica se existem novas mensagens na tela principal do WhatsApp e retorna os nomes dos contatos que enviaram.</li> </ul>"},{"location":"codigo/automation/#configuracao-interna","title":"\u2699\ufe0f Configura\u00e7\u00e3o Interna","text":"<ul> <li>Usa <code>ChromeDriver</code> com suporte a modo headless.</li> <li>Preserva sess\u00f5es de usu\u00e1rio via <code>user-data-dir</code>.</li> <li>Navegador \u00e9 maximizado e configurado para linguagem <code>pt-br</code>.</li> <li>Caminho do driver configurado automaticamente com base no diret\u00f3rio do projeto.</li> </ul> <p>Essa classe \u00e9 a base de todas as opera\u00e7\u00f5es automatizadas do sistema, sendo utilizada tanto na execu\u00e7\u00e3o manual quanto na execu\u00e7\u00e3o via endpoints REST expostos pela API Flask.</p>"},{"location":"execucao/","title":"\ud83e\udd16 Execu\u00e7\u00e3o Aut\u00f4noma","text":"<p>O modo de execu\u00e7\u00e3o aut\u00f4noma permite rodar o PyConector diretamente via terminal, sem depender de requisi\u00e7\u00f5es externas \u00e0 API Flask.  Essa abordagem \u00e9 ideal para testes locais, automa\u00e7\u00f5es simples ou comportamentos cont\u00ednuos de escuta e resposta.</p> <p>A classe <code>automation</code>, respons\u00e1vel por controlar o WhatsApp Web via Selenium, \u00e9 a mesma utilizada na vers\u00e3o com API. No entanto, aqui o fluxo de controle e l\u00f3gica est\u00e3o contidos diretamente nos scripts Python.</p>"},{"location":"execucao/#exemplos-incluidos","title":"\ud83d\udcc2 Exemplos inclu\u00eddos","text":"<ul> <li> <p><code>main.py</code>   Executa o fluxo completo: login, escuta de mensagens e resposta autom\u00e1tica.</p> </li> <li> <p><code>example_of_auto_response_to_any_contact.py</code>   Detecta qualquer novo contato com mensagem recebida e responde com um texto fixo.</p> </li> <li> <p><code>example_of_sending_image_to_specific_contact.py</code>   Demonstra como abrir uma conversa espec\u00edfica e enviar uma imagem.</p> </li> <li> <p><code>example_of_response_based_on_last_message.py</code>   Analisa o conte\u00fado da \u00faltima mensagem recebida e responde de forma contextual.</p> </li> </ul>"},{"location":"execucao/#observacao-importante","title":"\u26a0\ufe0f Observa\u00e7\u00e3o Importante","text":"<p>Todos os exemplos pressup\u00f5em que o PyConector esteja logado no WhatsApp Web via leitura de QR Code.  A sess\u00e3o deve estar ativa no navegador controlado pelo Selenium, com o perfil persistido na pasta <code>dados/</code>.</p> <p>Este modo \u00e9 ideal para criar automa\u00e7\u00f5es simples e diretas, sem overhead de servidor, especialmente em scripts agendados ou testes locais.</p>"},{"location":"execucao/example_auto/","title":"\u2709\ufe0f <code>example_of_auto_response_to_any_contact.py</code>","text":"<p>Este exemplo implementa uma rotina simples e eficaz para responder automaticamente todos os contatos que enviarem uma nova mensagem, com um texto fixo.</p> <p>\u00c9 ideal para respostas autom\u00e1ticas b\u00e1sicas, como mensagens de sauda\u00e7\u00e3o, aus\u00eancia, confirma\u00e7\u00e3o ou atendimento autom\u00e1tico.</p>"},{"location":"execucao/example_auto/#logica-do-funcionamento","title":"\ud83e\udde0 L\u00f3gica do Funcionamento","text":""},{"location":"execucao/example_auto/#1-inicializacao-do-pyconector","title":"1. Inicializa\u00e7\u00e3o do PyConector","text":"<pre><code>instance = automation(gui=True)\ninstance.start()\n</code></pre> <ul> <li>Inicializa o navegador controlado via Selenium em modo gr\u00e1fico.</li> <li>Inicia o processo de autentica\u00e7\u00e3o e carregamento do WhatsApp Web.</li> </ul>"},{"location":"execucao/example_auto/#2-controle-de-contatos-respondidos","title":"2. Controle de Contatos Respondidos","text":"<pre><code>contatosEncontrados = set()\n</code></pre> <ul> <li>Armazena os nomes dos contatos que j\u00e1 receberam uma resposta.</li> <li>Garante que cada contato ser\u00e1 respondido apenas uma vez por ciclo.</li> </ul>"},{"location":"execucao/example_auto/#3-laco-de-verificacao","title":"3. La\u00e7o de Verifica\u00e7\u00e3o","text":"<pre><code>novos_contatos = instance.VerificarNovaMensagem()\n</code></pre> <ul> <li>Escaneia a interface do WhatsApp Web em busca de novos contatos com mensagens n\u00e3o lidas.</li> </ul> <pre><code>for contato in novos_contatos:\n    if contato not in contatosEncontrados:\n        print(f\"\ud83d\udce8 Nova mensagem de: {contato}\")\n        contatosEncontrados.add(contato)\n</code></pre> <ul> <li>Exibe o nome do contato e o adiciona \u00e0 fila de resposta.</li> </ul>"},{"location":"execucao/example_auto/#4-resposta-automatica","title":"4. Resposta Autom\u00e1tica","text":"<pre><code>instance.searchExistsContactAndOpen(contato)\ninstance.enviar_mensagem_para_contato_aberto(\"Example message bot test!\")\n</code></pre> <ul> <li>Abre a conversa com o contato.</li> <li>Envia uma mensagem autom\u00e1tica padr\u00e3o.</li> </ul> <pre><code>contatosEncontrados.remove(contato)\ninstance.go_to_home()\n</code></pre> <ul> <li>Ap\u00f3s o envio, o contato \u00e9 removido da fila e o PyConector retorna \u00e0 tela principal.</li> </ul>"},{"location":"execucao/example_auto/#5-controle-de-loop","title":"5. Controle de Loop","text":"<pre><code>time.sleep(3)\n</code></pre> <ul> <li>Aguarda 3 segundos antes de iniciar uma nova verifica\u00e7\u00e3o.</li> </ul>"},{"location":"execucao/example_auto/#exemplo-de-mensagem-padrao","title":"\ud83d\udca1 Exemplo de Mensagem Padr\u00e3o","text":"<pre><code>\"Example message PyConector test!\"\n</code></pre> <p>Voc\u00ea pode customizar o conte\u00fado conforme o objetivo do seu PyConector, como: - \"Ol\u00e1! Em breve retornaremos seu contato.\" - \"Este n\u00famero est\u00e1 automatizado. Para suporte, acesse nosso site.\" - \"Obrigado por entrar em contato!\"</p>"},{"location":"execucao/example_auto/#pre-requisitos","title":"\ud83d\udee0\ufe0f Pr\u00e9-requisitos","text":"<ul> <li>Sess\u00e3o do WhatsApp Web ativa e autenticada.</li> <li>ChromeDriver configurado e compat\u00edvel.</li> <li>M\u00f3dulos Python instalados via <code>requirements.txt</code>.</li> </ul> <p>Este script \u00e9 um \u00f3timo ponto de partida para construir respostas mais complexas ou regras baseadas em an\u00e1lise de conte\u00fado.</p>"},{"location":"execucao/example_image/","title":"\ud83d\uddbc\ufe0f <code>example_of_sending_image_to_specific_contact.py</code>","text":"<p>Este exemplo mostra como detectar uma nova mensagem de um contato espec\u00edfico e responder automaticamente com o envio de uma imagem.</p> <p>\u00c9 ideal para automatizar o envio de m\u00eddia em fluxos pr\u00e9-definidos ou campanhas de resposta visual.</p>"},{"location":"execucao/example_image/#logica-do-funcionamento","title":"\ud83e\udde0 L\u00f3gica do Funcionamento","text":""},{"location":"execucao/example_image/#1-inicializacao-do-pyconector","title":"1. Inicializa\u00e7\u00e3o do PyConector","text":"<pre><code>instance = automation(gui=True)\ninstance.start()\n</code></pre> <ul> <li>Inicializa o PyConector com interface gr\u00e1fica (<code>gui=True</code>).</li> <li>Realiza o login via QR Code e mant\u00e9m a sess\u00e3o ativa no navegador.</li> </ul>"},{"location":"execucao/example_image/#2-deteccao-de-novas-mensagens","title":"2. Detec\u00e7\u00e3o de Novas Mensagens","text":"<pre><code>novos_contatos = instance.VerificarNovaMensagem()\n</code></pre> <ul> <li>Escaneia a tela principal do WhatsApp Web em busca de novas mensagens n\u00e3o lidas.</li> </ul> <pre><code>for contato in novos_contatos:\n    if contato not in contatosEncontrados:\n        print(f\"\ud83d\udce8 Nova mensagem de: {contato}\")\n        contatosEncontrados.add(contato)\n</code></pre> <ul> <li>Exibe no terminal o nome do contato e adiciona \u00e0 lista de controle para garantir que o envio seja feito apenas uma vez.</li> </ul>"},{"location":"execucao/example_image/#3-regra-de-envio-de-imagem","title":"3. Regra de Envio de Imagem","text":"<pre><code>if contato == \"Marco Antonio\":\n</code></pre> <ul> <li>Verifica se o contato \u00e9 o desejado. Pode ser adaptado para m\u00faltiplos nomes.</li> </ul> <pre><code>instance.searchExistsContactAndOpen(contato)\nimagem = instance.openImage(\"./images/teste.png\")\ninstance.sendFigure(imagem)\n</code></pre> <ul> <li>Abre a conversa com o contato.</li> <li>Processa a imagem localizada em <code>./images/teste.png</code>.</li> <li>Realiza o envio da imagem utilizando <code>sendFigure</code>.</li> </ul>"},{"location":"execucao/example_image/#4-controle-de-fluxo","title":"4. Controle de Fluxo","text":"<ul> <li>Ap\u00f3s envio, o contato \u00e9 removido de <code>contatosEncontrados</code> para evitar reenvio.</li> <li>O PyConector retorna \u00e0 tela principal com <code>instance.go_to_home()</code> para continuar escutando novas mensagens.</li> <li>O loop reinicia ap\u00f3s um <code>sleep(3)</code> para evitar sobrecarga e polling excessivo.</li> </ul>"},{"location":"execucao/example_image/#pre-requisitos","title":"\ud83d\udcc2 Pr\u00e9-requisitos","text":"<ul> <li>A imagem <code>teste.png</code> deve estar presente em <code>./images/</code>.</li> <li>O PyConector deve estar autenticado e com sess\u00e3o ativa no WhatsApp Web.</li> <li>\u00c9 necess\u00e1rio o ChromeDriver configurado corretamente.</li> </ul>"},{"location":"execucao/example_image/#exemplo-de-comportamento","title":"\ud83e\uddea Exemplo de Comportamento","text":"Contato A\u00e7\u00e3o \"Marco Antonio\" Envio autom\u00e1tico da imagem <code>teste.png</code> Outro contato Ignorado"},{"location":"execucao/example_image/#pre-requisitos_1","title":"\ud83d\udee0\ufe0f Pr\u00e9-requisitos","text":"<ul> <li>Sess\u00e3o do WhatsApp Web ativa e autenticada.</li> <li>ChromeDriver configurado e compat\u00edvel.</li> <li>M\u00f3dulos Python instalados via <code>requirements.txt</code>.</li> </ul> <p>Este script pode ser adaptado facilmente para envio em massa, respostas personalizadas com m\u00eddia ou integra\u00e7\u00e3o com gatilhos externos.</p>"},{"location":"execucao/example_response_last/","title":"\ud83d\udcac <code>example_of_response_based_on_last_message.py</code>","text":"<p>Este exemplo demonstra como o PyConector pode responder de forma inteligente e contextual, com base no conte\u00fado da \u00faltima mensagem recebida em uma conversa do WhatsApp.</p> <p>O objetivo \u00e9 personalizar a resposta autom\u00e1tica dependendo de palavras-chave simples encontradas na mensagem recebida.</p>"},{"location":"execucao/example_response_last/#logica-de-funcionamento","title":"\ud83e\udde0 L\u00f3gica de Funcionamento","text":""},{"location":"execucao/example_response_last/#1-funcao-de-normalizacao","title":"1. Fun\u00e7\u00e3o de Normaliza\u00e7\u00e3o","text":"<pre><code>from unicodedata import normalize\n\ndef normalizar_texto(texto):\n    return normalize('NFKD', texto).encode('ASCII', 'ignore').decode('ASCII').lower()\n</code></pre> <ul> <li>Remove acentua\u00e7\u00e3o e transforma todo o texto em min\u00fasculas.</li> <li>Isso facilita a compara\u00e7\u00e3o e identifica\u00e7\u00e3o de palavras-chave, mesmo que escritas com varia\u00e7\u00f5es como \"Ol\u00e1\", \"ola\", \"OL\u00c1\", etc.</li> </ul>"},{"location":"execucao/example_response_last/#2-captura-da-ultima-mensagem","title":"2. Captura da \u00daltima Mensagem","text":"<pre><code>ultima_msg = normalizar_texto(instance.pegar_ultima_mensagem())\n</code></pre> <ul> <li>Utiliza a fun\u00e7\u00e3o <code>pegar_ultima_mensagem()</code> da classe <code>automation</code> para buscar a \u00faltima mensagem da conversa aberta.</li> <li>Em seguida, aplica a fun\u00e7\u00e3o <code>normalizar_texto</code> para padronizar a entrada.</li> </ul>"},{"location":"execucao/example_response_last/#3-definicao-da-resposta-com-base-no-conteudo","title":"3. Defini\u00e7\u00e3o da Resposta com Base no Conte\u00fado","text":"<pre><code>if \"oi\" in ultima_msg or \"ola\" in ultima_msg:\n    resposta = \"Ol\u00e1! Como posso ajudar?\"\nelif \"preco\" in ultima_msg or \"valor\" in ultima_msg:\n    resposta = \"Veja os pre\u00e7os em https://meusite.com/precos\"\nelse:\n    resposta = \"Desculpe, n\u00e3o entendi.\"\n</code></pre> <ul> <li>A resposta \u00e9 escolhida com base na presen\u00e7a de palavras-chave espec\u00edficas na \u00faltima mensagem.</li> <li>Esse comportamento pode ser expandido facilmente para incluir mais palavras ou at\u00e9 integrar modelos de NLP.</li> </ul>"},{"location":"execucao/example_response_last/#exemplo-de-comportamento","title":"\ud83d\udcdd Exemplo de Comportamento","text":"Mensagem recebida Resposta autom\u00e1tica \"Oi, tudo bem?\" \"Ol\u00e1! Como posso ajudar?\" \"Qual o valor do produto\" \"Veja os pre\u00e7os em https://meusite.com/precos\" \"asdf123\" \"Desculpe, n\u00e3o entendi.\""},{"location":"execucao/example_response_last/#pre-requisitos","title":"\ud83d\udee0\ufe0f Pr\u00e9-requisitos","text":"<ul> <li>Sess\u00e3o do WhatsApp Web ativa e autenticada.</li> <li>ChromeDriver configurado e compat\u00edvel.</li> <li>M\u00f3dulos Python instalados via <code>requirements.txt</code>.</li> </ul>"},{"location":"execucao/main/","title":"\ud83d\ude80 <code>main.py</code> \u2013 Fluxo Principal de Execu\u00e7\u00e3o","text":"<p>Este script executa o PyConector de forma aut\u00f4noma diretamente no terminal. Ele realiza o login, escuta novas mensagens recebidas e responde automaticamente a determinados contatos. \u00c9 ideal para rodar o PyConector sem API, em modo cont\u00ednuo.</p>"},{"location":"execucao/main/#descricao-do-funcionamento","title":"\u2699\ufe0f Descri\u00e7\u00e3o do Funcionamento","text":""},{"location":"execucao/main/#1-inicializacao-do-pyconector","title":"1. Inicializa\u00e7\u00e3o do PyConector","text":"<pre><code>instance = automation(gui=True)\ninstance.start()\n</code></pre> <ul> <li>Cria uma inst\u00e2ncia do PyConector com interface gr\u00e1fica (<code>gui=True</code>).</li> <li>Inicia o navegador controlado pelo Selenium e carrega o WhatsApp Web.</li> </ul>"},{"location":"execucao/main/#2-controle-de-mensagens","title":"2. Controle de Mensagens","text":"<pre><code>contatosEncontrados = set()\nlistaPermitidos = []\n</code></pre> <ul> <li><code>contatosEncontrados</code>: armazena os contatos que j\u00e1 foram detectados como novos para evitar m\u00faltiplas respostas.</li> <li><code>listaPermitidos</code>: se preenchida, restringe as respostas apenas aos contatos listados (por nome).</li> </ul>"},{"location":"execucao/main/#3-laco-principal-de-escuta","title":"3. La\u00e7o Principal de Escuta","text":"<pre><code>while True:\n    novos_contatos = instance.VerificarNovaMensagem()\n</code></pre> <ul> <li>Verifica continuamente (a cada 3 segundos) se h\u00e1 novas mensagens recebidas na tela principal do WhatsApp.</li> </ul>"},{"location":"execucao/main/#4-deteccao-de-novas-mensagens","title":"4. Detec\u00e7\u00e3o de Novas Mensagens","text":"<pre><code>for contato in novos_contatos:\n    if contato not in contatosEncontrados:\n        print(f\"\ud83d\udce8 Nova mensagem de: {contato}\")\n        contatosEncontrados.add(contato)\n</code></pre> <ul> <li>Para cada contato novo detectado, imprime no terminal e adiciona \u00e0 lista de contatos a serem respondidos.</li> </ul>"},{"location":"execucao/main/#5-resposta-condicional","title":"5. Resposta Condicional","text":"<pre><code>if novos_contatos and (not listaPermitidos or any(c in novos_contatos for c in listaPermitidos)):\n</code></pre> <ul> <li>Se houver novos contatos e:</li> <li><code>listaPermitidos</code> estiver vazia (modo aberto); ou</li> <li>Pelo menos um contato estiver na lista de permitidos.</li> </ul>"},{"location":"execucao/main/#6-interacao-com-o-contato","title":"6. Intera\u00e7\u00e3o com o Contato","text":"<pre><code>instance.searchExistsContactAndOpen(contato)\nhistory = instance.pegar_todas_mensagens()\nsuccess = instance.enviar_mensagem_para_contato_aberto(\"ola essa e uma mensagem de teste\")\n</code></pre> <ul> <li>Abre a conversa com o contato.</li> <li>Recupera o hist\u00f3rico de mensagens.</li> <li>Envia uma mensagem de resposta fixa.</li> <li>Se o envio for bem-sucedido, remove o contato da lista de pendentes.</li> </ul>"},{"location":"execucao/main/#7-retorno-a-tela-inicial","title":"7. Retorno \u00e0 Tela Inicial","text":"<pre><code>instance.go_to_home()\n</code></pre> <ul> <li>Garante que o PyConector volte \u00e0 tela principal do WhatsApp para continuar escutando novas conversas.</li> </ul>"},{"location":"execucao/main/#intervalo-de-verificacao","title":"\u23f1\ufe0f Intervalo de Verifica\u00e7\u00e3o","text":"<pre><code>time.sleep(3)\n</code></pre> <ul> <li>Aguarda 3 segundos antes de iniciar um novo ciclo de verifica\u00e7\u00e3o.</li> </ul>"},{"location":"execucao/main/#comportamento-esperado","title":"\u2705 Comportamento Esperado","text":"<ul> <li>O PyConector responder\u00e1 apenas uma vez por contato enquanto a sess\u00e3o estiver ativa.</li> <li>Ap\u00f3s resposta, o contato \u00e9 removido da fila <code>contatosEncontrados</code>.</li> <li>Pode ser adaptado para responder com base em filtros ou an\u00e1lises de conte\u00fado da mensagem.</li> </ul>"},{"location":"execucao/main/#requisitos","title":"\ud83e\uddea Requisitos","text":"<ul> <li>Sess\u00e3o ativa no WhatsApp Web.</li> <li>ChromeDriver compat\u00edvel e configurado corretamente.</li> <li>Depend\u00eancias do projeto instaladas (<code>pip install -r requirements.txt</code>).</li> </ul>"}]}